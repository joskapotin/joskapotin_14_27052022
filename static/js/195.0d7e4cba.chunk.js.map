{"version":3,"file":"static/js/195.0d7e4cba.chunk.js","mappings":"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","sources":["utils/hooks/useToggle.jsx","components/ui/form/input/Input.jsx","components/ui/form/select/Select.jsx","components/ui/form/fieldset/FieldSet.jsx","components/ui/form/button/Button.jsx","components/ui/modal/Modal.jsx","constants/formOptions.js","components/pages/createEmployee/CreateEmployee.jsx","services/api.js"],"sourcesContent":["import { useState } from 'react';\n\nfunction useToggle(initialValue) {\n  const [value, setValue] = useState(initialValue);\n\n  const toggle = () => setValue(!value);\n\n  return [value, toggle];\n}\n\nexport default useToggle;\n","import PropTypes from \"prop-types\"\r\n\r\nfunction Input({ type = \"text\", name, label, register }) {\r\n  return (\r\n    <div className=\"form-group mb-3\">\r\n      <label htmlFor={name} className=\"form-label\">\r\n        {label}\r\n      </label>\r\n      <input id={name} type={type} className=\"form-control\" {...register(name)} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Input\r\n\r\nInput.defaultProps = {\r\n  type: \"text\",\r\n}\r\n\r\nInput.propTypes = {\r\n  type: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  register: PropTypes.func.isRequired,\r\n}\r\n","import PropTypes from \"prop-types\"\n\nfunction Select({ name, label, options, register }) {\n  return (\n    <div className=\"form-group mb-3\">\n      <label htmlFor={name} className=\"form-label\">\n        {label}\n      </label>\n      <select id={name} name={name} className=\"form-control\" {...register(name)}>\n        {options.map((option) => (\n          <option key={`option-${option.name}`} value={option.abbreviation}>\n            {option.name}\n          </option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\nexport default Select\n\nSelect.propTypes = {\n  name: PropTypes.string.isRequired,\n  label: PropTypes.string.isRequired,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      abbreviation: PropTypes.string,\n    })\n  ).isRequired,\n  register: PropTypes.func.isRequired,\n}\n","import PropTypes from \"prop-types\"\r\n\r\nfunction FieldSet({ children, title }) {\r\n  return (\r\n    <fieldset className=\"mb-3\">\r\n      <legend>{title}</legend>\r\n      {children}\r\n    </fieldset>\r\n  )\r\n}\r\n\r\nexport default FieldSet\r\n\r\nFieldSet.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n}\r\n","import PropTypes from \"prop-types\"\r\n\r\nfunction Button({ type = \"button\", text }) {\r\n  return (\r\n    <div className=\"mb-3\">\r\n      <input type={type} className=\"btn btn-primary mb-3\" value={text} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Button\r\n\r\nButton.defaultProps = {\r\n  type: \"text\",\r\n}\r\n\r\nButton.propTypes = {\r\n  type: PropTypes.string,\r\n  text: PropTypes.string.isRequired,\r\n}\r\n","import PropTypes from \"prop-types\"\r\n\r\nfunction Modal({ children, title, isOpen = false, toggle = null }) {\r\n  if (!isOpen) {\r\n    return null\r\n  }\r\n  return (\r\n    <div className=\"modal\" tabIndex=\"-1\">\r\n      <div className=\"modal-dialog\">\r\n        <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n            <h5 className=\"modal-title\">{title}</h5>\r\n            {toggle && <button type=\"button\" className=\"btn-close\" onClick={toggle} aria-label=\"Close\" />}\r\n          </div>\r\n          <div className=\"modal-body\">{children}</div>\r\n          <div className=\"modal-footer\">\r\n            {toggle && (\r\n              <button type=\"button\" className=\"btn btn-secondary\" onClick={toggle}>\r\n                Close\r\n              </button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n\r\nModal.defaultProps = {\r\n  isOpen: false,\r\n  toggle: null,\r\n}\r\n\r\nModal.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  isOpen: PropTypes.bool,\r\n  toggle: PropTypes.func,\r\n}\r\n","const formOptions = {\n  states: [\n    {\n      name: 'Alabama',\n      abbreviation: 'AL',\n    },\n    {\n      name: 'Alaska',\n      abbreviation: 'AK',\n    },\n    {\n      name: 'American Samoa',\n      abbreviation: 'AS',\n    },\n    {\n      name: 'Arizona',\n      abbreviation: 'AZ',\n    },\n    {\n      name: 'Arkansas',\n      abbreviation: 'AR',\n    },\n    {\n      name: 'California',\n      abbreviation: 'CA',\n    },\n    {\n      name: 'Colorado',\n      abbreviation: 'CO',\n    },\n    {\n      name: 'Connecticut',\n      abbreviation: 'CT',\n    },\n    {\n      name: 'Delaware',\n      abbreviation: 'DE',\n    },\n    {\n      name: 'District Of Columbia',\n      abbreviation: 'DC',\n    },\n    {\n      name: 'Federated States Of Micronesia',\n      abbreviation: 'FM',\n    },\n    {\n      name: 'Florida',\n      abbreviation: 'FL',\n    },\n    {\n      name: 'Georgia',\n      abbreviation: 'GA',\n    },\n    {\n      name: 'Guam',\n      abbreviation: 'GU',\n    },\n    {\n      name: 'Hawaii',\n      abbreviation: 'HI',\n    },\n    {\n      name: 'Idaho',\n      abbreviation: 'ID',\n    },\n    {\n      name: 'Illinois',\n      abbreviation: 'IL',\n    },\n    {\n      name: 'Indiana',\n      abbreviation: 'IN',\n    },\n    {\n      name: 'Iowa',\n      abbreviation: 'IA',\n    },\n    {\n      name: 'Kansas',\n      abbreviation: 'KS',\n    },\n    {\n      name: 'Kentucky',\n      abbreviation: 'KY',\n    },\n    {\n      name: 'Louisiana',\n      abbreviation: 'LA',\n    },\n    {\n      name: 'Maine',\n      abbreviation: 'ME',\n    },\n    {\n      name: 'Marshall Islands',\n      abbreviation: 'MH',\n    },\n    {\n      name: 'Maryland',\n      abbreviation: 'MD',\n    },\n    {\n      name: 'Massachusetts',\n      abbreviation: 'MA',\n    },\n    {\n      name: 'Michigan',\n      abbreviation: 'MI',\n    },\n    {\n      name: 'Minnesota',\n      abbreviation: 'MN',\n    },\n    {\n      name: 'Mississippi',\n      abbreviation: 'MS',\n    },\n    {\n      name: 'Missouri',\n      abbreviation: 'MO',\n    },\n    {\n      name: 'Montana',\n      abbreviation: 'MT',\n    },\n    {\n      name: 'Nebraska',\n      abbreviation: 'NE',\n    },\n    {\n      name: 'Nevada',\n      abbreviation: 'NV',\n    },\n    {\n      name: 'New Hampshire',\n      abbreviation: 'NH',\n    },\n    {\n      name: 'New Jersey',\n      abbreviation: 'NJ',\n    },\n    {\n      name: 'New Mexico',\n      abbreviation: 'NM',\n    },\n    {\n      name: 'New York',\n      abbreviation: 'NY',\n    },\n    {\n      name: 'North Carolina',\n      abbreviation: 'NC',\n    },\n    {\n      name: 'North Dakota',\n      abbreviation: 'ND',\n    },\n    {\n      name: 'Northern Mariana Islands',\n      abbreviation: 'MP',\n    },\n    {\n      name: 'Ohio',\n      abbreviation: 'OH',\n    },\n    {\n      name: 'Oklahoma',\n      abbreviation: 'OK',\n    },\n    {\n      name: 'Oregon',\n      abbreviation: 'OR',\n    },\n    {\n      name: 'Palau',\n      abbreviation: 'PW',\n    },\n    {\n      name: 'Pennsylvania',\n      abbreviation: 'PA',\n    },\n    {\n      name: 'Puerto Rico',\n      abbreviation: 'PR',\n    },\n    {\n      name: 'Rhode Island',\n      abbreviation: 'RI',\n    },\n    {\n      name: 'South Carolina',\n      abbreviation: 'SC',\n    },\n    {\n      name: 'South Dakota',\n      abbreviation: 'SD',\n    },\n    {\n      name: 'Tennessee',\n      abbreviation: 'TN',\n    },\n    {\n      name: 'Texas',\n      abbreviation: 'TX',\n    },\n    {\n      name: 'Utah',\n      abbreviation: 'UT',\n    },\n    {\n      name: 'Vermont',\n      abbreviation: 'VT',\n    },\n    {\n      name: 'Virgin Islands',\n      abbreviation: 'VI',\n    },\n    {\n      name: 'Virginia',\n      abbreviation: 'VA',\n    },\n    {\n      name: 'Washington',\n      abbreviation: 'WA',\n    },\n    {\n      name: 'West Virginia',\n      abbreviation: 'WV',\n    },\n    {\n      name: 'Wisconsin',\n      abbreviation: 'WI',\n    },\n    {\n      name: 'Wyoming',\n      abbreviation: 'WY',\n    },\n  ],\n  departments: [\n    {\n      name: 'Sales',\n    },\n    {\n      name: 'Marketing',\n    },\n    {\n      name: 'Engineering',\n    },\n    {\n      name: 'Human Resources',\n    },\n    {\n      name: 'Legal',\n    },\n  ],\n};\n\nexport default formOptions;\n","import { Link } from \"react-router-dom\"\nimport { useForm } from \"react-hook-form\"\nimport useToggle from \"../../../utils/hooks/useToggle\"\nimport Input from \"../../ui/form/input/Input\"\nimport Select from \"../../ui/form/select/Select\"\nimport FieldSet from \"../../ui/form/fieldset/FieldSet\"\nimport Button from \"../../ui/form/button/Button\"\nimport Modal from \"../../ui/modal/Modal\"\nimport formOptions from \"../../../constants/formOptions\"\nimport { saveEmployee } from \"../../../services/api\"\n\nfunction CreateEmployee() {\n  const [isOpen, toggle] = useToggle(false)\n  const { register, handleSubmit } = useForm()\n\n  const onSubmit = (employee) => {\n    saveEmployee(employee)\n    toggle()\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"text-center\">\n        <h1>HRnet</h1>\n        <Link to=\"employee-list\">View Current Employees</Link>\n        <h2>Create Employee</h2>\n      </div>\n\n      <form className=\"create-employee-form mx-auto\" onSubmit={handleSubmit(onSubmit)}>\n        <Input type=\"text\" name=\"firstName\" label=\"First Name\" register={register} />\n        <Input type=\"text\" name=\"lastName\" label=\"Last Name\" register={register} />\n        <Input type=\"data\" name=\"dateOfBirth\" label=\"Date of Birth\" register={register} />\n        <Input type=\"data\" name=\"startDate\" label=\"Start Date\" register={register} />\n        <FieldSet title=\"Adress\">\n          <Input type=\"text\" name=\"street\" label=\"Street\" register={register} />\n          <Input type=\"text\" name=\"city\" label=\"City\" register={register} />\n          <Select name=\"state\" label=\"State\" options={formOptions.states} register={register} />\n          <Input type=\"number\" name=\"zipCode\" label=\"Zip Code\" register={register} />\n        </FieldSet>\n        <Select name=\"department\" label=\"Department\" options={formOptions.departments} register={register} />\n        <Button type=\"submit\" text=\"save\" />\n      </form>\n\n      <Modal title=\"Employee Created\" isOpen={isOpen} toggle={toggle}>\n        <p>\n          Employee was successfully created. You can view the employees <Link to=\"employee-list\">here</Link>.\n        </p>\n      </Modal>\n    </div>\n  )\n}\n\nexport default CreateEmployee\n","async function stall(stallTime = 1000) {\n  await new Promise((resolve) => {\n    setTimeout(resolve, stallTime)\n  })\n}\n\nexport async function getEmployees() {\n  await stall()\n  const employees = JSON.parse(localStorage.getItem(\"employees\"))\n  if (employees) {\n    return employees\n  }\n\n  const response = await fetch(\"./mock/employees.json\")\n  const data = await response.json()\n  return data\n}\n\nexport function saveEmployee(employee) {\n  const employees = JSON.parse(localStorage.getItem(\"employees\")) || []\n  employees.push(employee)\n  localStorage.setItem(\"employees\", JSON.stringify(employees))\n}\n"],"names":["initialValue","useState","value","setValue","Input","type","name","label","register","className","htmlFor","id","defaultProps","options","map","option","abbreviation","children","title","Button","text","Modal","isOpen","toggle","tabIndex","onClick","states","departments","useToggle","useForm","handleSubmit","to","onSubmit","employee","saveEmployee","formOptions","stall","stallTime","Promise","resolve","setTimeout","getEmployees","employees","JSON","parse","localStorage","getItem","fetch","response","json","data","push","setItem","stringify"],"sourceRoot":""}