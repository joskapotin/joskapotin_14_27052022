{"version":3,"file":"static/js/396.a881ebe4.chunk.js","mappings":"oPAMA,EANoBA,OAAOC,OAAO,CAChCC,gBAAiB,kBACjBC,mBAAoB,qBACpBC,eAAgB,mBCGLC,EAAoB,SAACC,GAAD,MAAW,CAC1CC,KAAMC,EAAAA,mBACNC,QAASH,ICNEI,EAAe,CAC1BC,WAAW,EACXL,KAAM,KACNM,MAAO,MA2BT,EAzBgB,SAACC,EAAOC,GACtB,OAAQA,EAAOP,MACb,KAAKC,EAAAA,gBACH,OAAO,kBACFK,GADL,IAEEF,WAAW,IAEf,KAAKH,EAAAA,mBACH,OAAO,kBACFK,GADL,IAEEF,WAAW,EACXC,MAAO,KACPN,KAAMQ,EAAOL,UAEjB,KAAKD,EAAAA,eACH,OAAO,kBACFK,GADL,IAEEF,WAAW,EACXC,MAAOE,EAAOL,UAElB,QACE,OAAOI,ICrBN,SAAeE,IAAtB,4CAAO,OAAP,0BAAO,4GAAqBC,EAArB,+BAAiC,IAAjC,SACC,IAAIC,SAAQ,SAACC,GACjBC,WAAWD,EAASF,MAFjB,mECFP,IAoCA,EApCiB,SAAC,GAAa,IAAXI,EAAU,EAAVA,IAClB,GAA0BC,EAAAA,EAAAA,YAAWC,EAASZ,GAA9C,eAAOG,EAAP,KAAcU,EAAd,KAgCA,OA9BAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,IAAIC,gBAEtBC,EAAS,yCAAG,kGAChBJ,EHV+B,CACnChB,KAAMC,EAAAA,kBGQc,SAGVO,EAAM,MAHI,gCAMSa,MAAMR,EAAK,CAAES,OAAQJ,EAAgBI,SAN9C,WAMRC,EANQ,QAOAC,GAPA,sBAQN,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,YAAgCH,EAASI,aARnC,wBAUKJ,EAASK,OAVd,QAUR7B,EAVQ,OAWdiB,EAASlB,EAAkBC,IAXb,kDAcTmB,EAAgBI,OAAOO,SAC1Bb,GHfoBc,EGeG,KAAIA,QHfM,CACzC9B,KAAMC,EAAAA,eACNC,QAAS4B,KGFW,kCHAO,IAACA,IGAR,qBAAH,qDAsBf,OAFAV,IAEO,WACLF,EAAgBa,WAEjB,CAAClB,IAEGP,G,SCjCH0B,EAAkB,CACtBC,OAAQ,CACN,CAAEC,MAAO,aAAcnC,KAAM,aAC7B,CAAEmC,MAAO,YAAanC,KAAM,YAC5B,CAAEmC,MAAO,aAAcnC,KAAM,aAC7B,CAAEmC,MAAO,aAAcnC,KAAM,cAC7B,CAAEmC,MAAO,gBAAiBnC,KAAM,eAChC,CAAEmC,MAAO,SAAUnC,KAAM,UACzB,CAAEmC,MAAO,OAAQnC,KAAM,QACvB,CAAEmC,MAAO,QAASnC,KAAM,SACxB,CAAEmC,MAAO,WAAYnC,KAAM,YAE7BoC,QAAS,GACTC,gBAAiB,CAAC,GAAI,GAAI,GAAI,KAC9BC,OAAQ,YACRC,cAAe,OAqCjB,MAlCA,WACE,OAAkCC,EAAAA,EAAAA,eAASC,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAmCC,EAAS,CAAE9B,IAAK,wBAA3CT,EAAR,EAAQA,UAAWL,EAAnB,EAAmBA,KAAMM,EAAzB,EAAyBA,MAiBzB,OAfAY,EAAAA,EAAAA,YAAU,WACR,IAAM2B,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,cAC9CJ,EACFF,GAAa,kBACRV,GADO,IAEVG,QAASS,KAEF7C,IAAS6C,GAClBF,GAAa,kBACRV,GADO,IAEVG,QAASpC,OAGZ,CAACA,KAGF,iBAAKkD,UAAU,YAAf,WACE,gBAAKA,UAAU,cAAf,UACE,gDAED7C,IAAa,wCACbqC,IAAa,SAAC,IAAD,CAAWA,UAAWA,IACnCpC,IAAS,yBAAMA,KAChB,cAAG4C,UAAU,cAAb,UACE,SAAC,KAAD,CAAMC,GAAG,IAAT","sources":["utils/hooks/useFetch/reducer/actionTypes.js","utils/hooks/useFetch/reducer/actionCreators.js","utils/hooks/useFetch/reducer/reducer.js","utils/helpers/helpers.js","utils/hooks/useFetch/useFetch.js","components/pages/employeeList/EmployeeList.jsx"],"sourcesContent":["const actionTypes = Object.freeze({\n  REQUEST_STARTED: \"REQUEST_STARTED\",\n  REQUEST_SUCCESSFUL: \"REQUEST_SUCCESSFUL\",\n  REQUEST_FAILED: \"REQUEST_FAILED\",\n})\n\nexport default actionTypes\n","import actionTypes from \"./actionTypes\"\n\nexport const requestStarted = () => ({\n  type: actionTypes.REQUEST_STARTED,\n})\n\nexport const requestSuccessful = (data) => ({\n  type: actionTypes.REQUEST_SUCCESSFUL,\n  payload: data,\n})\n\nexport const requestFailed = (message) => ({\n  type: actionTypes.REQUEST_FAILED,\n  payload: message,\n})\n","import actionTypes from \"./actionTypes\"\n\nexport const initialState = {\n  isLoading: true,\n  data: null,\n  error: null,\n}\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case actionTypes.REQUEST_STARTED:\n      return {\n        ...state,\n        isLoading: true,\n      }\n    case actionTypes.REQUEST_SUCCESSFUL:\n      return {\n        ...state,\n        isLoading: false,\n        error: null,\n        data: action.payload,\n      }\n    case actionTypes.REQUEST_FAILED:\n      return {\n        ...state,\n        isLoading: false,\n        error: action.payload,\n      }\n    default:\n      return state\n  }\n}\n\nexport default reducer\n","/* eslint-disable import/prefer-default-export */\n\n/**\n * It is a helper function to fake async function\n *\n * @param {integer} stallTime - The time in milliseconds for the promise to be resolved.\n */\nexport async function stall(stallTime = 1000) {\n  await new Promise((resolve) => {\n    setTimeout(resolve, stallTime)\n  })\n}\n","import { useEffect, useReducer } from \"react\"\nimport { requestStarted, requestSuccessful, requestFailed } from \"./reducer/actionCreators\"\nimport reducer, { initialState } from \"./reducer/reducer\"\nimport { stall } from \"../../helpers/helpers\"\n\nconst useFetch = ({ url }) => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  useEffect(() => {\n    const abortController = new AbortController()\n\n    const fetchData = async () => {\n      dispatch(requestStarted())\n\n      await stall(1500) // Simulate latency\n\n      try {\n        const response = await fetch(url, { signal: abortController.signal })\n        if (!response.ok) {\n          throw new Error(`${response.status} ${response.statusText}`)\n        }\n        const data = await response.json()\n        dispatch(requestSuccessful(data))\n      } catch (err) {\n        // only call dispatch when we know the fetch was not aborted\n        if (!abortController.signal.aborted) {\n          dispatch(requestFailed(err.message))\n        }\n      }\n    }\n\n    fetchData()\n\n    return () => {\n      abortController.abort()\n    }\n  }, [url])\n\n  return state\n}\n\nexport default useFetch\n","import { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport DataTable from \"data-table-jp\"\nimport useFetch from \"../../../utils/hooks/useFetch/useFetch\"\n\nconst dataTableConfig = {\n  labels: [\n    { title: \"First Name\", data: \"firstName\" },\n    { title: \"Last Name\", data: \"lastName\" },\n    { title: \"Start Date\", data: \"startDate\" },\n    { title: \"Department\", data: \"department\" },\n    { title: \"Date of Birth\", data: \"dateOfBirth\" },\n    { title: \"Street\", data: \"street\" },\n    { title: \"City\", data: \"city\" },\n    { title: \"State\", data: \"state\" },\n    { title: \"Zip Code\", data: \"zipCode\" },\n  ],\n  entries: [],\n  pageSizeOptions: [10, 25, 50, 100],\n  sortBy: \"firstName\",\n  sortDirection: \"asc\",\n}\n\nfunction EmployeeList() {\n  const [dataTable, setDataTable] = useState(undefined)\n  const { isLoading, data, error } = useFetch({ url: \"mock/employees.json\" })\n\n  useEffect(() => {\n    const employees = JSON.parse(localStorage.getItem(\"employees\"))\n    if (employees) {\n      setDataTable({\n        ...dataTableConfig,\n        entries: employees,\n      })\n    } else if (data && !employees) {\n      setDataTable({\n        ...dataTableConfig,\n        entries: data,\n      })\n    }\n  }, [data])\n\n  return (\n    <div className=\"container\">\n      <div className=\"text-center\">\n        <h1>Current Employees</h1>\n      </div>\n      {isLoading && <div>Loading...</div>}\n      {dataTable && <DataTable dataTable={dataTable} />}\n      {error && <div>{error}</div>}\n      <p className=\"text-center\">\n        <Link to=\"/\">Home</Link>\n      </p>\n    </div>\n  )\n}\n\nexport default EmployeeList\n"],"names":["Object","freeze","REQUEST_STARTED","REQUEST_SUCCESSFUL","REQUEST_FAILED","requestSuccessful","data","type","actionTypes","payload","initialState","isLoading","error","state","action","stall","stallTime","Promise","resolve","setTimeout","url","useReducer","reducer","dispatch","useEffect","abortController","AbortController","fetchData","fetch","signal","response","ok","Error","status","statusText","json","aborted","message","abort","dataTableConfig","labels","title","entries","pageSizeOptions","sortBy","sortDirection","useState","undefined","dataTable","setDataTable","useFetch","employees","JSON","parse","localStorage","getItem","className","to"],"sourceRoot":""}